require "securerandom"
require_relative "../json_convertible"

module FastlaneCI
  # Represents a single unit of data generated by a build
  class Artifact
    include FastlaneCI::JSONConvertible

    #
    # The Artifact model provides a simple interface to store a reference to any kind of data, but it is a dummy class.
    # It does not know how to access to its resource.
    # Also, it holds a reference to the ArtifactProvider which created the Artifact itself
    #

    # @return [UUID] The id of the artifact.
    attr_reader :id

    # type is just a String that refers to the kind of data that the Artifact represents (i.e., ipa, apk, log, etc.)
    # @return [String] The type or kind of artifact.
    attr_reader :type

    # @return [String] The reference to the artifact to a certain ArtifactProvider
    attr_accessor :reference

    # @return [ArtifactProvider] The reference to the ArtifactProvider that stores the artifact
    attr_accessor :provider

    def initialize(type: nil, reference: nil, provider: nil, id: nil)
      @type = type
      @reference = reference
      @provider = provider
      @id = id || SecureRandom.uuid
    end

    def self.json_to_attribute_name_proc_map
      provider_object_to_provider = proc { |object|
        # So, there might be some chances (but it shouldn't ever happen)
        # that the Artifact's ArtifactProvider is null in the JSON, so it must be nil in the object.
        # But that means that the Artifact is unrecoverable.
        # TODO: What kind of error handling should we provide? An Artifact with nil provider is unrecoverable.
        nil if object.nil?
        provider_class = Object.const_get(object["class_name"])
        if provider_class.include?(JSONConvertible)
          provider = provider_class.from_json!(object)
          provider
        end
      }
      return { :@provider => provider_object_to_provider }
    end

    def self.attribute_name_to_json_proc_map
      provider_to_provider_object = proc { |provider|
        if provider.class.include?(JSONConvertible)
          hash = provider.to_object_dictionary
          hash
        end
      }
      return { :@provider => provider_to_provider_object }
    end
  end
end
